{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Sprintf.js","tagline":"Another implementation of sprintf in JavaScript","body":"sprintf.js\r\n==========\r\n\r\n#### Another implementation of sprintf in JavaScript ####\r\n\r\n`sprintf` returns - like the sprintf versions in other languages - a formatted String.\r\n\r\n### Targeted platforms ###\r\n\r\n`sprintf.js` currently targets the following platforms:\r\n\r\n* Mozilla Firefox 14 and higher\r\n* Chrome 18 and higher\r\n\r\n### Small Demo ###\r\n<http://playground.josi.de/sprintf/index.html>\r\n\r\n### Unit test ###\r\n<http://playground.josi.de/sprintf/test/index.html>\r\n\r\nUsing sprintf.js\r\n----------------\r\n\r\nTo use `sprintf.js` in your application, download the latest release and copy \r\n`libs/sprintf.js` to a suitable location. Then include it in your HTML\r\nlike so:\r\n\r\n    <script type=\"text/javascript\" src=\"/path/to/sprintf.js\"></script>\r\n\r\nDocumentation\r\n-------------\r\n\r\n    String sprintf ( String format [, mixed arguments] )\r\n\r\n# Parameters #\r\n\r\n## format ##\r\n\r\nThe format string is composed of zero or more directives: ordinary characters (excluding %) that are copied directly to the result, and conversion specifications, each of which results in fetching its own parameter. \r\n\r\nEach conversion specification consists of a percent sign (%), followed by one or more of these elements, in order:\r\n\r\n1. An optional sign specifier that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well.\r\n* An optional padding specifier that says what character will be used for padding the results to the right string size. This may be a space character or a 0 (zero character). The default is to pad with spaces. An alternate padding character can be specified by prefixing it with a single quote (').\r\n* An optional alignment specifier that says if the result should be left-justified or right-justified. The default is right-justified; a - character here will make it left-justified.\r\n* An optional number, a width specifier that says how many characters (minimum) this conversion should result in.\r\n* An optional precision specifier in the form of a period (`.') followed by an optional decimal digit string that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string.\r\n\r\nA type specifier that says what type the argument data should be treated as.\r\n\r\n### Possible types ###\r\n* % - a literal percent character. No argument is required.\r\n* b - the argument is treated as an integer, and presented as a binary number.\r\n* c - the argument is treated as an integer, and presented as the character with that ASCII value.\r\n* d - the argument is treated as an integer, and presented as a (signed) decimal number.\r\n* e - the argument is treated as scientific notation (e.g. 1.2e+2). The precision specifier stands for the number of digits after the decimal point since PHP 5.2.1. In earlier versions, it was taken as number of significant digits (one less).\r\n* E - like %e but uses uppercase letter (e.g. 1.2E+2).\r\n* u - the argument is treated as an integer, and presented as an unsigned decimal number.\r\n* f - the argument is treated as a float, and presented as a floating-point number (locale aware).\r\n* F - the argument is treated as a float, and presented as a floating-point number (non-locale aware).\r\n* g - shorter of %e and %f.\r\n* G - shorter of %E and %f.\r\n* o - the argument is treated as an integer, and presented as an octal number.\r\n* s - the argument is treated as and presented as a string.\r\n* x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters).\r\n* X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters).\r\n\r\n### argument numbering/swapping ###\r\nThe format string supports argument numbering/swapping. Here is an example:\r\n\r\n```javascript\r\nvar format = 'There are %d monkeys in the %s',\r\n    text = sprintf(format,12,'world');\r\n```\r\n\r\nImagine, we want to rewrite the text without changing the code itself:\r\n\r\n```javascript\r\nvar format = 'The %s contains %d',\r\n    text = sprintf(format,12,'world');\r\n```\r\n\r\nWe have some problems now: The order and type of placeholders does not match the order of arguments in the code. So we have to rewrite the format string:\r\n\r\n```javascript\r\nvar format = 'The %2$s contains %1$d',\r\n    text = sprintf(format,12,'world');\r\n```\r\n\r\n### padding and justifying ###\r\n\r\nPoint-padded and right justified String, length is 10:\r\n```javascript\r\nvar text = sprintf(\"%'.+10s\", \"test\");\r\n//text == \"......test\"\r\n```\r\n\r\nPoint-padded and left justified String, length is 10:\r\n```javascript\r\nvar text = sprintf(\"%'.-10s\", \"test\");\r\n//text == \"test......\"\r\n```\r\n\r\n### precision ###\r\n\r\n```javascript\r\nvar text = sprintf(\"%.2f\", 3.141);\r\n//text == \"3.14\"\r\n```\r\n\r\n### always signed values ###\r\n\r\n```javascript\r\nvar text = sprintf(\"%+.2f\", 3.141);\r\n//text == \"+3.14\"\r\n```\r\n\r\n## More examples ##\r\n\r\nCheck out test/index.html for more examples on `sprintf.js`","google":""}